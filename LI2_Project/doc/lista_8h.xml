<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="lista_8h" kind="file" language="C++">
    <compoundname>lista.h</compoundname>
    <includes refid="data_8h" local="yes">data.h</includes>
    <includedby refid="game_8h" local="yes">include/game.h</includedby>
    <includedby refid="interface_8h" local="yes">include/interface.h</includedby>
    <includedby refid="lista_8c" local="yes">src/lista.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="1">
        <label>include/lista.h</label>
        <link refid="lista_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>src/competicao.c</label>
        <link refid="competicao_8c"/>
      </node>
      <node id="9">
        <label>include/files.h</label>
        <link refid="files_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/interface.c</label>
        <link refid="interface_8c"/>
      </node>
      <node id="4">
        <label>include/interface.h</label>
        <link refid="interface_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/bot.h</label>
        <link refid="bot_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/game.h</label>
        <link refid="game_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="7">
        <label>src/bot.c</label>
        <link refid="bot_8c"/>
      </node>
      <node id="11">
        <label>src/lista.c</label>
        <link refid="lista_8c"/>
      </node>
      <node id="10">
        <label>src/game.c</label>
        <link refid="game_8c"/>
      </node>
      <node id="1">
        <label>include/lista.h</label>
        <link refid="lista_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structlista" prot="public">lista</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" prot="public" static="no">
        <type>struct <ref refid="structlista" kindref="compound">lista</ref> *</type>
        <definition>typedef struct lista* LISTA</definition>
        <argsstring></argsstring>
        <name>LISTA</name>
        <briefdescription>
<para>Estrutura da Lista Ligada. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="17" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lista_8h_1a2e53c3239769fb9b2da73ae382866438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
        <definition>LISTA initLista</definition>
        <argsstring>()</argsstring>
        <name>initLista</name>
        <briefdescription>
<para>Função que inicia uma Lista. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Apontador para Lista </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="23" column="7" bodyfile="src/lista.c" bodystart="12" bodyend="14" declfile="include/lista.h" declline="23" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a6ec793087950b61f792d8e184bf04d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA l, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Função adiciona valor no início da Lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista à qual se vai adicionar o elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a adicionar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nova lista </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="31" column="7" bodyfile="src/lista.c" bodystart="22" bodyend="29" declfile="include/lista.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1af90a7ac214fd566bfb7288d744c94185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Apontador para o valor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="38" column="6" bodyfile="src/lista.c" bodystart="36" bodyend="38" declfile="include/lista.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1affb39e37aef63ab00b6df8f9336f6673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função devolve a cauda da Lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista com a cauda a devolver </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nova Lista com a cauda da Lista l </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="45" column="7" bodyfile="src/lista.c" bodystart="45" bodyend="47" declfile="include/lista.h" declline="45" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a18d863cdb6eb3e2ede74559c4d70b4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Remove a cabeça da Lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista à qual se vai remover a cabeça </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cauda da Lista </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="52" column="7" bodyfile="src/lista.c" bodystart="54" bodyend="62" declfile="include/lista.h" declline="52" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a7e919af230d184128c5465451ea64a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Verifica se uma lista está vazia. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a verificar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inteiro com resultado booleano </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="59" column="5" bodyfile="src/lista.c" bodystart="69" bodyend="76" declfile="include/lista.h" declline="59" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a3b297e808da2a4f43ca3d5792dc5153b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
        <definition>LISTA freeLista</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>freeLista</name>
        <param>
          <type><ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que liberta todo o espaço ocupado por uma lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a libertar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista vazia </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lista.h" line="66" column="7" bodyfile="src/lista.c" bodystart="83" bodyend="96" declfile="include/lista.h" declline="66" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ficheiro com funções sobre a estrutura Lista. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>__lista_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__lista_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data_8h" kindref="compound">data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structlista" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref>*<sp/>next;</highlight></codeline>
<codeline lineno="17" refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" refkind="member"><highlight class="normal">}*<ref refid="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" kindref="member">LISTA</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a2e53c3239769fb9b2da73ae382866438" kindref="member">initLista</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a6ec793087950b61f792d8e184bf04d9d" kindref="member">insere_cabeca</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lista_8h_1af90a7ac214fd566bfb7288d744c94185" kindref="member">devolve_cabeca</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1affb39e37aef63ab00b6df8f9336f6673" kindref="member">proximo</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a18d863cdb6eb3e2ede74559c4d70b4e5" kindref="member">remove_cabeca</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lista_8h_1a7e919af230d184128c5465451ea64a79" kindref="member">lista_esta_vazia</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/><ref refid="lista_8h_1a3b297e808da2a4f43ca3d5792dc5153b" kindref="member">freeLista</ref>(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/lista.h"/>
  </compounddef>
</doxygen>
